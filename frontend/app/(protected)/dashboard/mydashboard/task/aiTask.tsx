// app/task/ai-review.tsx (Example path for Expo Router)
// Or src/screens/AiGeneratedTasksReviewScreen.tsx
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, Pressable, Alert, ActivityIndicator } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { MaterialIcons } from '@expo/vector-icons';
import { Task as FrontendTaskType } from '../task'; // ADJUST PATH

// TODO: Import your apiService function for updating tasks if you add inline quick edits
// import { updateTaskAPI } from '../../../../services/apiService';

const AiGeneratedTasksReviewScreen = () => {
  const params = useLocalSearchParams<{ generatedTasksJSON?: string; groupID?: string; userID?: string }>();
  const [aiTasks, setAiTasks] = useState<FrontendTaskType[]>([]);
  const [isLoading, setIsLoading] = useState(false); // For any actions on this screen

  useEffect(() => {
    if (params.generatedTasksJSON) {
      try {
        const tasks = JSON.parse(params.generatedTasksJSON) as FrontendTaskType[];
        setAiTasks(tasks);
      } catch (e) {
        console.error("Failed to parse AI generated tasks:", e);
        Alert.alert("Error", "Could not load AI generated tasks.");
        // router.back(); // Optionally go back if tasks can't be parsed
      }
    } else {
        Alert.alert("No Tasks", "No AI generated tasks were passed to this screen.");
        // router.back();
    }
  }, [params.generatedTasksJSON]);

  const navigateToEditScreen = (task: FrontendTaskType) => {
    if (task._id) {
      console.log("Navigating to edit AI task:", task.title);
      router.push({
        pathname: `./createtask`, // ADJUST this route to your edit screen
        params: { taskData: JSON.stringify(task) }
      });
    } else {
      Alert.alert("Error", "Task ID is missing, cannot edit.");
    }
  };

  if (aiTasks.length === 0 && !isLoading) { // Show message if no tasks after parsing
    return (
        <View className="flex-1 bg-white">
             <View className="flex-row items-center justify-between px-4 pt-12 pb-4 border-b border-slate-200">
                <Pressable onPress={() => router.back()} className="p-1 mr-auto"><MaterialIcons name="arrow-back-ios" size={22} color="black" /></Pressable>
                <Text className="text-lg font-semibold text-slate-800">AI Generated Tasks</Text>
                <View className="w-8" />
            </View>
            <View className="flex-1 justify-center items-center p-5">
                <Text className="text-slate-600 text-center">No tasks were generated by AI, or there was an issue loading them.</Text>
                <Pressable
                    className="py-3 px-6 rounded-lg items-center mt-5 bg-blue-500 active:bg-blue-600"
                    onPress={() => router.back()}
                >
                    <Text className="text-white text-base font-semibold">Go Back</Text>
                </Pressable>
            </View>
        </View>
    )
  }


  return (
    <View className="flex-1 bg-white">
      {/* Header */}
      <View className="flex-row items-center justify-between px-4 pt-12 pb-4 border-b border-slate-200">
        <Pressable onPress={() => router.back()} className="p-1 mr-auto">
            <MaterialIcons name="arrow-back-ios" size={22} color="black" />
        </Pressable>
        <Text className="text-lg font-semibold text-slate-800">Review AI Tasks ({aiTasks.length})</Text>
        <View className="w-8" /> {/* Spacer */}
      </View>

      <FlatList
        data={aiTasks}
        keyExtractor={(item) => item._id || Math.random().toString()}
        className="p-5"
        ListHeaderComponent={<Text className="text-sm text-slate-500 mb-3">Review these tasks created by AI. Tap any task to edit its details.</Text>}
        renderItem={({ item }) => (
          <Pressable
            onPress={() => navigateToEditScreen(item)}
            className="bg-white border border-slate-300 rounded-lg p-4 mb-3 shadow-sm active:bg-slate-100"
          >
            <View className="flex-row justify-between items-center">
              <View className="flex-1 mr-2">
                <Text className="text-base font-medium text-slate-800" numberOfLines={1}>{item.title}</Text>
                {item.detail && <Text className="text-xs text-slate-500 mt-0.5">{item.detail} {item.subDetail && `â€¢ ${item.subDetail}`}</Text>}
              </View>
              <MaterialIcons name="edit" size={22} color="gray" />
            </View>
          </Pressable>
        )}
        ListFooterComponent={
            <Pressable
                className="py-3 rounded-lg items-center mt-3 bg-green-500 active:bg-green-600 mb-5"
                onPress={() => router.replace('../dashboardBase')} // Replace to go to dashboard, or router.back() if appropriate
            >
                <Text className="text-white text-base font-semibold">Done - Go to Dashboard</Text>
            </Pressable>
        }
      />
    </View>
  );
};

export default AiGeneratedTasksReviewScreen;